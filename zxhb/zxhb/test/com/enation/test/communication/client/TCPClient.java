package com.enation.test.communication.client;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.SocketChannel;
import java.util.Scanner;

import javax.servlet.http.HttpServletRequest;

import com.hp.hpl.sparta.xpath.ThisNodeTest;

public class TCPClient {

	// 信道选择器
	private Selector selector;
	 // 与服务器通信的信道
	private SocketChannel socketChannel;
	// 要连接的服务器Ip地址
	private String hostIp;
	
	// 要连接的远程服务器在监听的端口
	private int hostListenningPort;

	  /**
	   * 构造函数
	   * @param HostIp
	   * @param HostListenningPort
	   * @throws IOException
	   */
	  public TCPClient(String HostIp,int HostListenningPort)throws IOException{
	    this.hostIp=HostIp;
	    this.hostListenningPort=HostListenningPort;   
	    initialize();
	  }

	  /**
	   * 初始化
	   * @throws IOException
	   */
	  private void initialize() throws IOException {
		// 打开监听信道并设置为非阻塞模式
	    socketChannel=SocketChannel.open(new InetSocketAddress(hostIp, hostListenningPort));
	    socketChannel.configureBlocking(false);
	    
	    // 打开并注册选择器到信道
	    selector = Selector.open();
	    socketChannel.register(selector, SelectionKey.OP_READ);
//	    
	    new TCPClientReadThread(selector);
	  }
	  
	  /**
	   * 发送字符串到服务器
	   * @param message
	   * @throws IOException
	   */
	  public void sendMsg(String message) throws IOException{
	    ByteBuffer writeBuffer=ByteBuffer.wrap(message.getBytes("UTF-16"));
	    socketChannel.write(writeBuffer);
	  }
	  public void sendMsg(byte[] message) throws IOException{
		    ByteBuffer writeBuffer=ByteBuffer.wrap(message);
		    socketChannel.write(writeBuffer);
	  }
	  
	  public static void main(String[] args) throws IOException, InterruptedException{
		  //模拟发送报文数据
			TCPClient client=new TCPClient("192.168.1.203",9000);
			byte[] message = {
					0x4a,0x54,0x41,0x30,0x30,0x30,0x30,0x31,0x31,0x32,0x32,0x32,0x30,0x30,0x30,0x32,0x13,0x1f,(byte) 0x8e,(byte) 0x87,0x30,0x02,0x16,0x55,
					0x38,0x1b,0x01, (byte) 0x81,0,1,66,0x79,0x06,(byte) 0xA6,(byte) 0xDC,0x34,0x52,0x37,0x32,0x35,0x32,0x33,0x36,0x37,0x31,0x30,0x34,0x33,0x31,0x30,0x00,0x34,0x34,
					0x04,(byte)0xec,0x1c,
					/*0x35,0x20,0x74,0x04,(byte) 0x9d,0x09,0x45,0x28,0,(byte) 0xf3,0x29,0x4e,0x1a,0x1b,(byte) 0xdc,0x32,0x30,0x31,0x36,0x31,0x30,0x31,0x30,0x30,
					0x38,0x35,0x31,0x31,0x33,0x43,0x5d,0x39,0x18,0x32,0x07,(byte) 0xe6,0x1c,
		  			0x2f,0x2a,0x01,0,2,(byte) 0x8b,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0x0b,14,(byte) 0xc0,8,7,1,0x7c,0x1c,
		  			0x35,0x20,0x74,0x04,(byte) 0x9d,0x09,0x45,0x28,0,(byte) 0xf3,0x29,0x4e,0x1a,0x1b,(byte) 0xdc,0x32,0x30,0x31,0x36,0x31,0x30,0x31,0x30,0x30,
					0x38,0x35,0x31,0x31,0x33,0x43,0x5d,0x39,0x18,0x32,0x07,(byte) 0xe6,0x1c,
					0x35,0x20,0x74,0x04,(byte) 0x9d,0x09,0x45,0x28,0,(byte) 0xf3,0x29,0x4e,0x1a,0x1b,(byte) 0xdc,0x32,0x30,0x31,0x36,0x31,0x30,0x31,0x30,0x30,
					0x38,0x35,0x31,0x31,0x33,0x43,0x5d,0x39,0x18,0x32,0x07,(byte) 0xe6,0x1c,*/
		  			0x38,0x1b,0x00, (byte) 0x81,0,1,66,0x79,0x06,(byte) 0xA6,(byte) 0xDC,0x34,0x52,0x37,0x32,0x35,0x32,0x33,0x36,0x37,0x31,0x30,0x34,0x33,0x31,0x30,0x00,0x34,0x34,
		  			0x34,(byte)0xec,0x1c,
					0x38,0x1b,0x01, (byte) 0x81,0,1,66,0x79,0x06,(byte) 0xA6,(byte) 0xDC,0x34,0x52,0x37,0x32,0x35,0x32,0x33,0x36,0x37,0x31,0x30,0x34,0x33,0x31,0x30,0x00,0x34,0x34,
						0x04,(byte)0xec,0x1c,
					0x35,0x20,0x74,0x04,(byte) 0x9d,0x09,0x45,0x28,0,(byte) 0xf3,0x29,0x4e,0x1a,0x1b,(byte) 0xdc,0x32,0x30,0x31,0x36,0x31,0x30,0x31,0x30,0x30,
						0x38,0x35,0x31,0x31,0x33,0x43,0x5d,0x39,0x18,0x32,0x07,(byte) 0xe6,0x1c,
		  			0x2f,0x2a,0x01,0,2,(byte) 0x8b,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0x0b,14,(byte) 0xc0,8,7,1,0x7c,0x1c,
		  			0x35,0x20,0x74,0x04,(byte) 0x9d,0x09,0x45,0x28,0,(byte) 0xf3,0x29,0x4e,0x1a,0x1b,(byte) 0xdc,0x32,0x30,0x31,0x36,0x31,0x30,0x31,0x30,0x30,
		  				0x38,0x35,0x31,0x31,0x33,0x43,0x5d,0x39,0x18,0x32,0x07,(byte) 0xe6,0x1c,
					0x35,0x20,0x74,0x04,(byte) 0x9d,0x09,0x45,0x28,0,(byte) 0xf3,0x29,0x4e,0x1a,0x1b,(byte) 0xdc,0x32,0x30,0x31,0x36,0x31,0x30,0x31,0x30,0x30,
						0x38,0x35,0x31,0x31,0x33,0x43,0x5d,0x39,0x18,0x32,0x07,(byte) 0xe6,0x1c,
					0x2f,0x2a,0x01,0,2,(byte) 0x8b,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0x0b,14,(byte) 0xc0,8,7,1,0x7c,0x1c,
					0x2f,0x2a,0x01,0,2,(byte) 0x8b,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0x0b,14,(byte) 0xc0,8,7,1,0x7c,0x1c,
					0x2f,0x2a,0x01,0,2,(byte) 0x8b,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0x0b,14,(byte) 0xc0,8,7,1,0x7c,0x1c,
					0x2f,0x2a,0x01,0,2,(byte) 0x8b,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0x0b,14,(byte) 0xc0,8,7,1,0x7c,0x1c,
					0x35,0x20,0x74,0x04,(byte) 0x9d,0x09,0x45,0x28,0,(byte) 0xf3,0x29,0x4e,0x1a,0x1b,(byte) 0xdc,0x32,0x30,0x31,0x36,0x31,0x30,0x31,0x30,0x30,
						0x38,0x35,0x31,0x31,0x33,0x43,0x5d,0x39,0x18,0x32,0x07,(byte) 0xe6,0x1c,
					0x38,0x1b,0x00, (byte) 0x81,0,1,66,0x79,0x06,(byte) 0xA6,(byte) 0xDC,0x34,0x52,0x37,0x32,0x35,0x32,0x33,0x36,0x37,0x31,0x30,0x34,0x33,0x31,0x30,0x00,0x34,0x34,
			  			0x34,(byte)0xec,0x1c};
			client.sendMsg(message);
			
			
			Thread.sleep(1000000);
			
			
			
			
			/*TCPClient client=new TCPClient("192.168.1.223",9001);
			String deviceId = "JTA0000111840002";
			byte[] message = new byte[29];
			int position = 0;
			for(byte by : deviceId.getBytes()){
				message[position++] = by;
			}
			//time
			byte[] activities = {0x00,0x00,0x00,0x02,0x16,0x55,0x23,0x01,0x00,0x00,0x00,(byte)0x1c}; //时间和版本
			for(byte by : activities){
				message[position++] = by;
			}
			client.sendMsg(message);
			Thread.sleep(1000000);*/
//			byte[] message = {0x4a,0x54,0x41,0x30,0x30,0x30,0x30,0x31,0x31,0x31,0x38,0x34,0x30,0x30,0x30,0x32,0x12,0x01,(byte)0xe2,(byte)0xfe,0x63,0x02,0x16,0x55,0x2e,0x18,0x31,0x41,0x31,0x4a,0x43,0x35,0x34,0x34,0x34,0x52,0x37,0x32,0x35,0x32,0x33,0x36,0x37,0x31,0x30,0x34,0x33,0x31,0x30,0x00,0x04,(byte)0xec,0x1c};
			
			
		  //模拟app发送激活数据	
//		  	TCPClient client=new TCPClient("123.57.57.145",9001);
			/*String msg = "1";
			while(msg!="exit"){
				Scanner scanner = new Scanner(System.in);
				System.out.println("输入你要发的数据包");
				msg =scanner.nextLine();
				if(msg.equals("exit")){
					client.socketChannel.close();
				}
				client.sendMsg("{\"sn\":\"111\",\"message\":\"hello小森\",\"dest_sn\":\"222\"}");
//				client.sendMsg("{\"sn\":\"222\",\"message\":\""+msg+"\",\"dest_sn\":\"111\"}");
			}*/
//			client.sendMsg("{\"sn\":\"111\",\"message\":\"hello小森\",\"dest_sn\":\"222\"}");
	  }
}
	
	
	

package com.enation.test.communication.client;

import java.io.IOException;

import org.junit.Test;

public class ClientTest {
	
	@Test
	public void test1() throws IOException, InterruptedException{
		TCPClient client=new TCPClient("123.57.57.145",9000);
		  byte[] messageOn = {
					0x4a,0x54,0x41,0x30,0x30,0x30,0x30,0x31,0x31,0x32,0x32,0x32,0x30,0x30,0x30,0x32,0x13,0x1f,(byte) 0x8e,(byte) 0x87,0x30,0x02,0x16,0x55,
					0x38,0x1b,0x01, (byte) 0x81,0,1,66,0x79,0x06,(byte) 0xA6,(byte) 0xDC,0x34,0x52,0x37,0x32,0x35,0x32,0x33,0x36,0x37,0x31,0x30,0x34,0x33,0x31,0x30,0x00,0x34,0x34,
					0x04,(byte)0xec,0x1c};
		  byte[] messageOff = {
					0x4a,0x54,0x41,0x30,0x30,0x30,0x30,0x31,0x31,0x32,0x32,0x32,0x30,0x30,0x30,0x32,0x13,0x1f,(byte) 0x8e,(byte) 0x87,0x30,0x02,0x16,0x55,
					0x38,0x1b,0x00, (byte) 0x81,0,1,66,0x79,0x06,(byte) 0xA6,(byte) 0xDC,0x34,0x52,0x37,0x32,0x35,0x32,0x33,0x36,0x37,0x31,0x30,0x34,0x33,0x31,0x30,0x00,0x34,0x34,
					0x04,(byte)0xec,0x1c};
		   byte[] messageFor351 = {
					0x4a,0x54,0x41,0x30,0x30,0x30,0x30,0x31,0x31,0x32,0x32,0x32,0x30,0x30,0x30,0x32,0x13,0x1f,(byte) 0x8e,(byte) 0x87,0x30,0x02,0x16,0x55,
					0x35,0x20,0x74,0x04,(byte) 0x9d,0x09,0x45,0x28,0,(byte) 0xf3,0x29,0x4e,0x1a,0x1b,(byte) 0xdc,0x32,0x30,0x31,0x36,0x31,0x30,0x31,0x30,0x30,
						0x38,0x35,0x31,0x31,0x33,0x43,0x5d,0x39,0x18,0x32,0x07,(byte) 0xe6,0x1c
					};
			byte[] messageFor352 = {
					0x4a,0x54,0x41,0x30,0x30,0x30,0x30,0x31,0x31,0x32,0x32,0x32,0x30,0x30,0x30,0x32,0x13,0x1f,(byte) 0x8e,(byte) 0x87,0x30,0x02,0x16,0x55,
					0x35,0x20,0x74,0x04,(byte) 0xa4,(byte) 0xfd,0x45,0x28,(byte) 0xf4,(byte) 0xf3,0x29,0x4e,0x1a,0x1b,(byte) 0xdc,0x32,0x30,0x31,0x36,0x31,0x30,0x31,0x30,0x30,
						0x38,0x35,0x31,0x31,0x33,0x43,0x5d,0x39,0x18,0x32,0x07,(byte) 0xe6,0x1c
					};
			byte[] messageFor353 = {
					0x4a,0x54,0x41,0x30,0x30,0x30,0x30,0x31,0x31,0x32,0x32,0x32,0x30,0x30,0x30,0x32,0x13,0x1f,(byte) 0x8e,(byte) 0x87,0x30,0x02,0x16,0x55,
					0x35,0x20,74,4,(byte) 0xb0,(byte) 0x94,45,28,0,(byte) 0xf6,(byte) 0x94,0x4e,0x1a,0x1b,(byte) 0xdc,0x32,0x30,0x31,0x36,0x31,0x30,0x31,0x30,0x30,
						0x38,0x35,0x31,0x31,0x33,0x43,0x5d,0x39,0x18,0x32,0x07,(byte) 0xe6,0x1c
					};
			byte[] messageFor354 = {
					0x4a,0x54,0x41,0x30,0x30,0x30,0x30,0x31,0x31,0x32,0x32,0x32,0x30,0x30,0x30,0x32,0x13,0x1f,(byte) 0x8e,(byte) 0x87,0x30,0x02,0x16,0x55,
					0x35,0x20,74,4,(byte) 0xb0,(byte) 0x94,45,28,0,(byte) 0xf6,(byte) 0x94,0x4e,0x1a,0x1b,(byte) 0xdc,0x32,0x30,0x31,0x36,0x31,0x30,0x31,0x30,0x30,
						0x38,0x35,0x31,0x31,0x33,0x43,0x5d,0x39,0x18,0x32,0x07,(byte) 0xe6,0x1c
					};
	     	byte[] messageFor2f1 = {
					0x4a,0x54,0x41,0x30,0x30,0x30,0x30,0x31,0x31,0x32,0x32,0x32,0x30,0x30,0x30,0x32,0x13,0x1f,(byte) 0x8e,(byte) 0x87,0x30,0x02,0x16,0x55,
					0x2f,0x2a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0,0,0,0,0x00,0,0,0,0,0x00,0,0,0,0,0,0,0,0,0,0,0x4e,0,0,0,0,0,5,40,0x1c
					};
			byte[] messageFor2f2 = {
					0x4a,0x54,0x41,0x30,0x30,0x30,0x30,0x31,0x31,0x32,0x32,0x32,0x30,0x30,0x30,0x32,0x13,0x1f,(byte) 0x8e,(byte) 0x87,0x30,0x02,0x16,0x55,
					0x2f,0x2a,0,0,2,89,0,0x31,0x31,0x36,0x31,0x38,0x2e,0x33,0x39,0x34,0x30,0x31,0,0,0,0,0x45,0x34,0x30,0x30,0x34,0x2e,0x31,0x30,0x36,0x30,0x37,0,0,0,0,0,0x4e,0,0,0,0,0,5,40,0x1c
					};
			
			byte[] messageFor2f3 = {
					0x4a,0x54,0x41,0x30,0x30,0x30,0x30,0x31,0x31,0x32,0x32,0x32,0x30,0x30,0x30,0x32,0x13,0x1f,(byte) 0x8e,(byte) 0x87,0x30,0x02,0x16,0x55,
					0x2f,0x2a,0,0,2,89,0,0x31,0x31,0x36,0x31,0x38,0x2e,0x33,0x38,0x39,0x34,0x38,0,0,0,0,0x45,0x34,0x30,0x30,0x33,0x2e,0x37,0x36,0x31,0x31,0x36,0,0,0,0,0,0x4e,0x18,0x13,(byte) 0x8c,17,16,6,0x3b,0x1c
					};

			byte[] messageFor2f4 = {
					0x4a,0x54,0x41,0x30,0x30,0x30,0x30,0x31,0x31,0x32,0x32,0x32,0x30,0x30,0x30,0x32,0x13,0x1f,(byte) 0x8e,(byte) 0x89,0x62,0x02,0x16,0x55,
					0x2f,0x2a,0,0,0,(byte) 0x8f,0,0x31,0x31,0x36,0x31,0x38,0x2e,0x33,0x36,0x31,0x32,0x30,0,0,0,0,0x45,0x34,0x30,0x30,0x34,0x2e,0x30,0x35,0x31,0x37,0x35,0,0,0,0,0,0x4e,0x1c,0x1d,0x68,0,0,0x05,(byte) 0xe6,0x1c
					};
		client.sendMsg(messageOn);
		Thread.sleep(1000);
		client.sendMsg(messageOff);
		Thread.sleep(1000);
		client.sendMsg(messageFor351);
		Thread.sleep(1000);
		client.sendMsg(messageFor352);
		Thread.sleep(1000);
		client.sendMsg(messageFor353);
		Thread.sleep(1000);
		client.sendMsg(messageFor354);
		Thread.sleep(1000);
		client.sendMsg(messageFor2f1);
		Thread.sleep(1000);
		client.sendMsg(messageFor2f2);
		Thread.sleep(1000);
		client.sendMsg(messageFor2f3);
		Thread.sleep(1000);
		client.sendMsg(messageFor2f4);
		Thread.sleep(1000);
	}
	
	@Test
	public void Test2() throws Exception{//激活保文
		TCPClient client=new TCPClient("123.57.57.145",9000);
		String ObdDeviceId = "JTA0000107220002";
		//自己组织盈架后台命令发送 0~15为赢家dev_id,16~31 为obdDiv,32需要执行的命令messageId,33为执行命令
		String deviceId = "0000000000000000";
		byte[] activationMessage = new byte[51];
		int position = 0 ;
		for(byte b : deviceId.getBytes()){
			activationMessage[position++] = b;
		}	
		for(byte b : ObdDeviceId.getBytes()){
			activationMessage[position++] = b;
		}
		//time   
		//byte[] activities = {0x00,0x00,0x00,0x00,0x02,0x16,0x55,0x23,0x01,0x00,0x55,0x55,0x55,0x55,0x55,0x55,0x02,(byte)0x8f,(byte)0x1c}; //时间和版本
		byte[] activities = {0x00,0x00,0x00,0x00,0x02,0x16,0x55,0x23,0x01,0x00,0x55,0x55,0x55,0x55,0x55,0x55,0x02,(byte)0x8f,(byte)0x1c}; //时间和版本
		for(byte by : activities){
			activationMessage[position++] = by;
		}
		
		client.sendMsg(activationMessage);
		Thread.sleep(1000000);
	}
	
	@Test
	public void Test3(){
		try{
			TCPClient client=new TCPClient("123.57.57.145",9000);
			String ObdDeviceId = "JTA0000107220002";
			//自己组织盈架后台命令发送 0~15为赢家dev_id,16~31 为obdDiv,32需要执行的命令messageId,33为执行命令
			String deviceId = "0000000000000000";
			byte[] deviceBytes = new byte[32];
			int position = 0 ;
			for(byte b : deviceId.getBytes()){
				deviceBytes[position++] = b;
			}	
			for(byte b : ObdDeviceId.getBytes()){
				deviceBytes[position++] = b;
			}
			//0x01报文  
			byte[] ip = {0x46,0x46,0x46,0x46,0x37,0x42,0x33,0x39,0x33,0x39,0x39,0x31,0x32,0x33,0x32,0x58}; 
			byte[] data = {0x0,0xa,0xa,0xa,0x1,0x3,0x2,0x3,(byte)0x80,0x0,0x0,0x0,0x0,0x14,0xa,0x14,0x1e,0xa,0x32,0x8,0x46,0x5,0x46,0x3,0x1e,0x1e,0x9,0x1,0x1,0x0,0x0,0x0,0x0};
			//	
			int length = ip.length + data.length;
			byte[] head = {0x00,0x00,0x00,0x00,0x02,0x16,0x55,0x01,(byte)length};//time+version+MSGID+length
		
			byte[] packMsg = new byte[head.length+ip.length+data.length];
			System.arraycopy(head, 0, packMsg, 0, head.length);
			System.arraycopy(ip, 0, packMsg, head.length, ip.length);
			System.arraycopy(data, 0, packMsg, head.length+ip.length, data.length);
			for(byte b : packMsg){
				System.out.print(b+",");
			}
			byte[] dataMsg = addCheckSum(packMsg);
			for(byte b : dataMsg){
				System.out.print(b+",");
			}
			byte[] messagesubpack = new byte[deviceBytes.length + dataMsg.length];
			System.arraycopy(deviceBytes, 0, messagesubpack, 0, deviceBytes.length);
			System.arraycopy(dataMsg, 0, messagesubpack, deviceBytes.length, dataMsg.length);
			for(byte b : messagesubpack){
				System.out.print(b+",");
			}
			client.sendMsg(messagesubpack);
			Thread.sleep(1000000);
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	public byte[] addCheckSum(byte[] packMsg){
		int num = 8 - (packMsg.length % 8) ;
		System.out.println(num);
		byte[] addchecksum = new byte[packMsg.length+num+3]; //3表示俩位checksum 1位0x1c
		System.arraycopy(packMsg, 0, addchecksum, 0, packMsg.length);
		for(int i = addchecksum.length-(1+3) ; i > addchecksum.length-(1+3+num) ; i-- ){
			addchecksum[i] = 0x55;
		}
		int checkSum = 0;
		for(byte b : addchecksum){
			checkSum+=b;
		}
		System.out.println(checkSum);
		String checkSumHex= Integer.toHexString(checkSum);
		if(checkSumHex.length() <= 2){
			addchecksum[addchecksum.length-3] = 0x00;
			addchecksum[addchecksum.length-2] = (byte)checkSum;
		}else if (checkSumHex.length() == 3){
			addchecksum[addchecksum.length-3] = Byte.parseByte(checkSumHex.substring(0,1), 16);
			addchecksum[addchecksum.length-2] = Byte.parseByte(checkSumHex.substring(1,3), 16);
		}else if (checkSumHex.length() == 4){
			addchecksum[addchecksum.length-3] = Byte.parseByte(checkSumHex.substring(0,2), 16);
			addchecksum[addchecksum.length-2] = Byte.parseByte(checkSumHex.substring(2,4), 16);
		} 
		addchecksum[addchecksum.length-1] = 0x1c;
		return addchecksum;
	}
}
